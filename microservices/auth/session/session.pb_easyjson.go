// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package session

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonDd312ac0DecodeGoFormHubMicroservicesAuthSession(in *jlexer.Lexer, out *UserSignup) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "username":
			out.Username = string(in.String())
		case "firstName":
			out.FirstName = string(in.String())
		case "lastName":
			out.LastName = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "email":
			out.Email = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDd312ac0EncodeGoFormHubMicroservicesAuthSession(out *jwriter.Writer, in UserSignup) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Username != "" {
		const prefix string = ",\"username\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Username))
	}
	if in.FirstName != "" {
		const prefix string = ",\"firstName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FirstName))
	}
	if in.LastName != "" {
		const prefix string = ",\"lastName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LastName))
	}
	if in.Password != "" {
		const prefix string = ",\"password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Password))
	}
	if in.Email != "" {
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserSignup) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDd312ac0EncodeGoFormHubMicroservicesAuthSession(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserSignup) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDd312ac0EncodeGoFormHubMicroservicesAuthSession(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserSignup) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDd312ac0DecodeGoFormHubMicroservicesAuthSession(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserSignup) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDd312ac0DecodeGoFormHubMicroservicesAuthSession(l, v)
}
func easyjsonDd312ac0DecodeGoFormHubMicroservicesAuthSession1(in *jlexer.Lexer, out *UserLogin) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "email":
			out.Email = string(in.String())
		case "password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDd312ac0EncodeGoFormHubMicroservicesAuthSession1(out *jwriter.Writer, in UserLogin) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Email != "" {
		const prefix string = ",\"email\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Email))
	}
	if in.Password != "" {
		const prefix string = ",\"password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserLogin) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDd312ac0EncodeGoFormHubMicroservicesAuthSession1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserLogin) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDd312ac0EncodeGoFormHubMicroservicesAuthSession1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserLogin) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDd312ac0DecodeGoFormHubMicroservicesAuthSession1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserLogin) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDd312ac0DecodeGoFormHubMicroservicesAuthSession1(l, v)
}
func easyjsonDd312ac0DecodeGoFormHubMicroservicesAuthSession2(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "username":
			out.Username = string(in.String())
		case "firstName":
			out.FirstName = string(in.String())
		case "lastName":
			out.LastName = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "avatar":
			out.Avatar = string(in.String())
		case "id":
			out.Id = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDd312ac0EncodeGoFormHubMicroservicesAuthSession2(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Username != "" {
		const prefix string = ",\"username\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Username))
	}
	if in.FirstName != "" {
		const prefix string = ",\"firstName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FirstName))
	}
	if in.LastName != "" {
		const prefix string = ",\"lastName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LastName))
	}
	if in.Password != "" {
		const prefix string = ",\"password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Password))
	}
	if in.Email != "" {
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	if in.Avatar != "" {
		const prefix string = ",\"avatar\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Avatar))
	}
	if in.Id != 0 {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Id))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v User) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDd312ac0EncodeGoFormHubMicroservicesAuthSession2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDd312ac0EncodeGoFormHubMicroservicesAuthSession2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *User) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDd312ac0DecodeGoFormHubMicroservicesAuthSession2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDd312ac0DecodeGoFormHubMicroservicesAuthSession2(l, v)
}
func easyjsonDd312ac0DecodeGoFormHubMicroservicesAuthSession3(in *jlexer.Lexer, out *SessionInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "session":
			out.Session = string(in.String())
		case "currentUser":
			if in.IsNull() {
				in.Skip()
				out.CurrentUser = nil
			} else {
				if out.CurrentUser == nil {
					out.CurrentUser = new(User)
				}
				(*out.CurrentUser).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDd312ac0EncodeGoFormHubMicroservicesAuthSession3(out *jwriter.Writer, in SessionInfo) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Session != "" {
		const prefix string = ",\"session\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Session))
	}
	if in.CurrentUser != nil {
		const prefix string = ",\"currentUser\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.CurrentUser).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SessionInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDd312ac0EncodeGoFormHubMicroservicesAuthSession3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SessionInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDd312ac0EncodeGoFormHubMicroservicesAuthSession3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SessionInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDd312ac0DecodeGoFormHubMicroservicesAuthSession3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SessionInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDd312ac0DecodeGoFormHubMicroservicesAuthSession3(l, v)
}
func easyjsonDd312ac0DecodeGoFormHubMicroservicesAuthSession4(in *jlexer.Lexer, out *Session) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "session":
			out.Session = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDd312ac0EncodeGoFormHubMicroservicesAuthSession4(out *jwriter.Writer, in Session) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Session != "" {
		const prefix string = ",\"session\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Session))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Session) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDd312ac0EncodeGoFormHubMicroservicesAuthSession4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Session) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDd312ac0EncodeGoFormHubMicroservicesAuthSession4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Session) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDd312ac0DecodeGoFormHubMicroservicesAuthSession4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Session) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDd312ac0DecodeGoFormHubMicroservicesAuthSession4(l, v)
}
func easyjsonDd312ac0DecodeGoFormHubMicroservicesAuthSession5(in *jlexer.Lexer, out *Nothing) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "dummy":
			out.Dummy = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDd312ac0EncodeGoFormHubMicroservicesAuthSession5(out *jwriter.Writer, in Nothing) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Dummy {
		const prefix string = ",\"dummy\":"
		first = false
		out.RawString(prefix[1:])
		out.Bool(bool(in.Dummy))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Nothing) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDd312ac0EncodeGoFormHubMicroservicesAuthSession5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Nothing) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDd312ac0EncodeGoFormHubMicroservicesAuthSession5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Nothing) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDd312ac0DecodeGoFormHubMicroservicesAuthSession5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Nothing) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDd312ac0DecodeGoFormHubMicroservicesAuthSession5(l, v)
}
func easyjsonDd312ac0DecodeGoFormHubMicroservicesAuthSession6(in *jlexer.Lexer, out *CheckResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "valid":
			out.Valid = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDd312ac0EncodeGoFormHubMicroservicesAuthSession6(out *jwriter.Writer, in CheckResult) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Valid {
		const prefix string = ",\"valid\":"
		first = false
		out.RawString(prefix[1:])
		out.Bool(bool(in.Valid))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CheckResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDd312ac0EncodeGoFormHubMicroservicesAuthSession6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CheckResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDd312ac0EncodeGoFormHubMicroservicesAuthSession6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CheckResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDd312ac0DecodeGoFormHubMicroservicesAuthSession6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CheckResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDd312ac0DecodeGoFormHubMicroservicesAuthSession6(l, v)
}
