// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson78ba5d84DecodeGoFormHubInternalModel(in *jlexer.Lexer, out *QuestionResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "type":
			out.Type = int(in.Int())
		case "required":
			out.Required = bool(in.Bool())
		case "number_of_passages":
			out.NumberOfPassagesQuestion = int(in.Int())
		case "answers":
			if in.IsNull() {
				in.Skip()
				out.Answers = nil
			} else {
				in.Delim('[')
				if out.Answers == nil {
					if !in.IsDelim(']') {
						out.Answers = make([]*AnswerResult, 0, 8)
					} else {
						out.Answers = []*AnswerResult{}
					}
				} else {
					out.Answers = (out.Answers)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *AnswerResult
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(AnswerResult)
						}
						easyjson78ba5d84DecodeGoFormHubInternalModel1(in, v1)
					}
					out.Answers = append(out.Answers, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson78ba5d84EncodeGoFormHubInternalModel(out *jwriter.Writer, in QuestionResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"required\":"
		out.RawString(prefix)
		out.Bool(bool(in.Required))
	}
	{
		const prefix string = ",\"number_of_passages\":"
		out.RawString(prefix)
		out.Int(int(in.NumberOfPassagesQuestion))
	}
	{
		const prefix string = ",\"answers\":"
		out.RawString(prefix)
		if in.Answers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Answers {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					easyjson78ba5d84EncodeGoFormHubInternalModel1(out, *v3)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v QuestionResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson78ba5d84EncodeGoFormHubInternalModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v QuestionResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson78ba5d84EncodeGoFormHubInternalModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QuestionResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson78ba5d84DecodeGoFormHubInternalModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *QuestionResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson78ba5d84DecodeGoFormHubInternalModel(l, v)
}
func easyjson78ba5d84DecodeGoFormHubInternalModel1(in *jlexer.Lexer, out *AnswerResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "text":
			out.Text = string(in.String())
		case "selected_times":
			out.SelectedTimesAnswer = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson78ba5d84EncodeGoFormHubInternalModel1(out *jwriter.Writer, in AnswerResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix[1:])
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"selected_times\":"
		out.RawString(prefix)
		out.Int(int(in.SelectedTimesAnswer))
	}
	out.RawByte('}')
}
func easyjson78ba5d84DecodeGoFormHubInternalModel2(in *jlexer.Lexer, out *Question) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if in.IsNull() {
				in.Skip()
				out.ID = nil
			} else {
				if out.ID == nil {
					out.ID = new(int64)
				}
				*out.ID = int64(in.Int64())
			}
		case "title":
			out.Title = string(in.String())
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "type":
			out.Type = int(in.Int())
		case "required":
			out.Required = bool(in.Bool())
		case "answers":
			if in.IsNull() {
				in.Skip()
				out.Answers = nil
			} else {
				in.Delim('[')
				if out.Answers == nil {
					if !in.IsDelim(']') {
						out.Answers = make([]*Answer, 0, 8)
					} else {
						out.Answers = []*Answer{}
					}
				} else {
					out.Answers = (out.Answers)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *Answer
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(Answer)
						}
						easyjson78ba5d84DecodeGoFormHubInternalModel3(in, v4)
					}
					out.Answers = append(out.Answers, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson78ba5d84EncodeGoFormHubInternalModel2(out *jwriter.Writer, in Question) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		if in.ID == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.ID))
		}
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	if in.Description != nil {
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(*in.Description))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"required\":"
		out.RawString(prefix)
		out.Bool(bool(in.Required))
	}
	if len(in.Answers) != 0 {
		const prefix string = ",\"answers\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v5, v6 := range in.Answers {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					easyjson78ba5d84EncodeGoFormHubInternalModel3(out, *v6)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Question) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson78ba5d84EncodeGoFormHubInternalModel2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Question) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson78ba5d84EncodeGoFormHubInternalModel2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Question) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson78ba5d84DecodeGoFormHubInternalModel2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Question) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson78ba5d84DecodeGoFormHubInternalModel2(l, v)
}
func easyjson78ba5d84DecodeGoFormHubInternalModel3(in *jlexer.Lexer, out *Answer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if in.IsNull() {
				in.Skip()
				out.ID = nil
			} else {
				if out.ID == nil {
					out.ID = new(int64)
				}
				*out.ID = int64(in.Int64())
			}
		case "text":
			out.Text = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson78ba5d84EncodeGoFormHubInternalModel3(out *jwriter.Writer, in Answer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		if in.ID == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.ID))
		}
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	out.RawByte('}')
}
