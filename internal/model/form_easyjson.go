// nolint
// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	sql "database/sql"
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6d10b66DecodeGoFormHubInternalModel(in *jlexer.Lexer, out *PassageAnswer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "question_id":
			if in.IsNull() {
				in.Skip()
				out.QuestionID = nil
			} else {
				if out.QuestionID == nil {
					out.QuestionID = new(int64)
				}
				*out.QuestionID = int64(in.Int64())
			}
		case "answer_text":
			out.Text = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6d10b66EncodeGoFormHubInternalModel(out *jwriter.Writer, in PassageAnswer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"question_id\":"
		out.RawString(prefix[1:])
		if in.QuestionID == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.QuestionID))
		}
	}
	{
		const prefix string = ",\"answer_text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PassageAnswer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6d10b66EncodeGoFormHubInternalModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PassageAnswer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6d10b66EncodeGoFormHubInternalModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PassageAnswer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6d10b66DecodeGoFormHubInternalModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PassageAnswer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6d10b66DecodeGoFormHubInternalModel(l, v)
}
func easyjson6d10b66DecodeGoFormHubInternalModel1(in *jlexer.Lexer, out *FormUpdate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if in.IsNull() {
				in.Skip()
				out.ID = nil
			} else {
				if out.ID == nil {
					out.ID = new(int64)
				}
				*out.ID = int64(in.Int64())
			}
		case "title":
			out.Title = string(in.String())
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "anonymous":
			out.Anonymous = bool(in.Bool())
		case "passage_max":
			out.PassageMax = int(in.Int())
		case "author":
			if in.IsNull() {
				in.Skip()
				out.Author = nil
			} else {
				if out.Author == nil {
					out.Author = new(UserGet)
				}
				easyjson6d10b66DecodeGoFormHubInternalModel2(in, out.Author)
			}
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "questions":
			if in.IsNull() {
				in.Skip()
				out.Questions = nil
			} else {
				in.Delim('[')
				if out.Questions == nil {
					if !in.IsDelim(']') {
						out.Questions = make([]*Question, 0, 8)
					} else {
						out.Questions = []*Question{}
					}
				} else {
					out.Questions = (out.Questions)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *Question
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(Question)
						}
						easyjson6d10b66DecodeGoFormHubInternalModel3(in, v1)
					}
					out.Questions = append(out.Questions, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "removed_questions":
			if in.IsNull() {
				in.Skip()
				out.RemovedQuestions = nil
			} else {
				in.Delim('[')
				if out.RemovedQuestions == nil {
					if !in.IsDelim(']') {
						out.RemovedQuestions = make([]int64, 0, 8)
					} else {
						out.RemovedQuestions = []int64{}
					}
				} else {
					out.RemovedQuestions = (out.RemovedQuestions)[:0]
				}
				for !in.IsDelim(']') {
					var v2 int64
					v2 = int64(in.Int64())
					out.RemovedQuestions = append(out.RemovedQuestions, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "removed_answers":
			if in.IsNull() {
				in.Skip()
				out.RemovedAnswers = nil
			} else {
				in.Delim('[')
				if out.RemovedAnswers == nil {
					if !in.IsDelim(']') {
						out.RemovedAnswers = make([]int64, 0, 8)
					} else {
						out.RemovedAnswers = []int64{}
					}
				} else {
					out.RemovedAnswers = (out.RemovedAnswers)[:0]
				}
				for !in.IsDelim(']') {
					var v3 int64
					v3 = int64(in.Int64())
					out.RemovedAnswers = append(out.RemovedAnswers, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6d10b66EncodeGoFormHubInternalModel1(out *jwriter.Writer, in FormUpdate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		if in.ID == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.ID))
		}
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		if in.Description == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Description))
		}
	}
	{
		const prefix string = ",\"anonymous\":"
		out.RawString(prefix)
		out.Bool(bool(in.Anonymous))
	}
	{
		const prefix string = ",\"passage_max\":"
		out.RawString(prefix)
		out.Int(int(in.PassageMax))
	}
	{
		const prefix string = ",\"author\":"
		out.RawString(prefix)
		if in.Author == nil {
			out.RawString("null")
		} else {
			easyjson6d10b66EncodeGoFormHubInternalModel2(out, *in.Author)
		}
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"questions\":"
		out.RawString(prefix)
		if in.Questions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v4, v5 := range in.Questions {
				if v4 > 0 {
					out.RawByte(',')
				}
				if v5 == nil {
					out.RawString("null")
				} else {
					easyjson6d10b66EncodeGoFormHubInternalModel3(out, *v5)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"removed_questions\":"
		out.RawString(prefix)
		if in.RemovedQuestions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.RemovedQuestions {
				if v6 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v7))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"removed_answers\":"
		out.RawString(prefix)
		if in.RemovedAnswers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.RemovedAnswers {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v9))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FormUpdate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6d10b66EncodeGoFormHubInternalModel1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FormUpdate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6d10b66EncodeGoFormHubInternalModel1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FormUpdate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6d10b66DecodeGoFormHubInternalModel1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FormUpdate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6d10b66DecodeGoFormHubInternalModel1(l, v)
}
func easyjson6d10b66DecodeGoFormHubInternalModel3(in *jlexer.Lexer, out *Question) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if in.IsNull() {
				in.Skip()
				out.ID = nil
			} else {
				if out.ID == nil {
					out.ID = new(int64)
				}
				*out.ID = int64(in.Int64())
			}
		case "title":
			out.Title = string(in.String())
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "type":
			out.Type = int(in.Int())
		case "required":
			out.Required = bool(in.Bool())
		case "answers":
			if in.IsNull() {
				in.Skip()
				out.Answers = nil
			} else {
				in.Delim('[')
				if out.Answers == nil {
					if !in.IsDelim(']') {
						out.Answers = make([]*Answer, 0, 8)
					} else {
						out.Answers = []*Answer{}
					}
				} else {
					out.Answers = (out.Answers)[:0]
				}
				for !in.IsDelim(']') {
					var v10 *Answer
					if in.IsNull() {
						in.Skip()
						v10 = nil
					} else {
						if v10 == nil {
							v10 = new(Answer)
						}
						easyjson6d10b66DecodeGoFormHubInternalModel4(in, v10)
					}
					out.Answers = append(out.Answers, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6d10b66EncodeGoFormHubInternalModel3(out *jwriter.Writer, in Question) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		if in.ID == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.ID))
		}
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	if in.Description != nil {
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(*in.Description))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"required\":"
		out.RawString(prefix)
		out.Bool(bool(in.Required))
	}
	if len(in.Answers) != 0 {
		const prefix string = ",\"answers\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v11, v12 := range in.Answers {
				if v11 > 0 {
					out.RawByte(',')
				}
				if v12 == nil {
					out.RawString("null")
				} else {
					easyjson6d10b66EncodeGoFormHubInternalModel4(out, *v12)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson6d10b66DecodeGoFormHubInternalModel4(in *jlexer.Lexer, out *Answer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if in.IsNull() {
				in.Skip()
				out.ID = nil
			} else {
				if out.ID == nil {
					out.ID = new(int64)
				}
				*out.ID = int64(in.Int64())
			}
		case "text":
			out.Text = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6d10b66EncodeGoFormHubInternalModel4(out *jwriter.Writer, in Answer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		if in.ID == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.ID))
		}
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	out.RawByte('}')
}
func easyjson6d10b66DecodeGoFormHubInternalModel2(in *jlexer.Lexer, out *UserGet) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "first_name":
			out.FirstName = string(in.String())
		case "last_name":
			out.LastName = string(in.String())
		case "username":
			out.Username = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "avatar":
			if in.IsNull() {
				in.Skip()
				out.Avatar = nil
			} else {
				if out.Avatar == nil {
					out.Avatar = new(string)
				}
				*out.Avatar = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6d10b66EncodeGoFormHubInternalModel2(out *jwriter.Writer, in UserGet) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	if in.FirstName != "" {
		const prefix string = ",\"first_name\":"
		out.RawString(prefix)
		out.String(string(in.FirstName))
	}
	if in.LastName != "" {
		const prefix string = ",\"last_name\":"
		out.RawString(prefix)
		out.String(string(in.LastName))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	if in.Email != "" {
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	if in.Avatar != nil {
		const prefix string = ",\"avatar\":"
		out.RawString(prefix)
		out.String(string(*in.Avatar))
	}
	out.RawByte('}')
}
func easyjson6d10b66DecodeGoFormHubInternalModel5(in *jlexer.Lexer, out *FormTitleList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "forms":
			if in.IsNull() {
				in.Skip()
				out.FormTitles = nil
			} else {
				in.Delim('[')
				if out.FormTitles == nil {
					if !in.IsDelim(']') {
						out.FormTitles = make([]*FormTitle, 0, 8)
					} else {
						out.FormTitles = []*FormTitle{}
					}
				} else {
					out.FormTitles = (out.FormTitles)[:0]
				}
				for !in.IsDelim(']') {
					var v13 *FormTitle
					if in.IsNull() {
						in.Skip()
						v13 = nil
					} else {
						if v13 == nil {
							v13 = new(FormTitle)
						}
						(*v13).UnmarshalEasyJSON(in)
					}
					out.FormTitles = append(out.FormTitles, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "count":
			out.Count = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6d10b66EncodeGoFormHubInternalModel5(out *jwriter.Writer, in FormTitleList) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"forms\":"
		out.RawString(prefix[1:])
		if in.FormTitles == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.FormTitles {
				if v14 > 0 {
					out.RawByte(',')
				}
				if v15 == nil {
					out.RawString("null")
				} else {
					(*v15).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix)
		out.Int(int(in.Count))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FormTitleList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6d10b66EncodeGoFormHubInternalModel5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FormTitleList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6d10b66EncodeGoFormHubInternalModel5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FormTitleList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6d10b66DecodeGoFormHubInternalModel5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FormTitleList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6d10b66DecodeGoFormHubInternalModel5(l, v)
}
func easyjson6d10b66DecodeGoFormHubInternalModel6(in *jlexer.Lexer, out *FormTitle) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "title":
			out.Title = string(in.String())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6d10b66EncodeGoFormHubInternalModel6(out *jwriter.Writer, in FormTitle) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FormTitle) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6d10b66EncodeGoFormHubInternalModel6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FormTitle) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6d10b66EncodeGoFormHubInternalModel6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FormTitle) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6d10b66DecodeGoFormHubInternalModel6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FormTitle) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6d10b66DecodeGoFormHubInternalModel6(l, v)
}
func easyjson6d10b66DecodeGoFormHubInternalModel7(in *jlexer.Lexer, out *FormResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "author":
			if in.IsNull() {
				in.Skip()
				out.Author = nil
			} else {
				if out.Author == nil {
					out.Author = new(UserGet)
				}
				easyjson6d10b66DecodeGoFormHubInternalModel2(in, out.Author)
			}
		case "passage_max":
			out.PassageMax = int(in.Int())
		case "number_of_passages":
			out.NumberOfPassagesForm = int(in.Int())
		case "questions":
			if in.IsNull() {
				in.Skip()
				out.Questions = nil
			} else {
				in.Delim('[')
				if out.Questions == nil {
					if !in.IsDelim(']') {
						out.Questions = make([]*QuestionResult, 0, 8)
					} else {
						out.Questions = []*QuestionResult{}
					}
				} else {
					out.Questions = (out.Questions)[:0]
				}
				for !in.IsDelim(']') {
					var v16 *QuestionResult
					if in.IsNull() {
						in.Skip()
						v16 = nil
					} else {
						if v16 == nil {
							v16 = new(QuestionResult)
						}
						easyjson6d10b66DecodeGoFormHubInternalModel8(in, v16)
					}
					out.Questions = append(out.Questions, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "anonymous":
			out.Anonymous = bool(in.Bool())
		case "participants":
			if in.IsNull() {
				in.Skip()
				out.Participants = nil
			} else {
				in.Delim('[')
				if out.Participants == nil {
					if !in.IsDelim(']') {
						out.Participants = make([]*UserGet, 0, 8)
					} else {
						out.Participants = []*UserGet{}
					}
				} else {
					out.Participants = (out.Participants)[:0]
				}
				for !in.IsDelim(']') {
					var v17 *UserGet
					if in.IsNull() {
						in.Skip()
						v17 = nil
					} else {
						if v17 == nil {
							v17 = new(UserGet)
						}
						easyjson6d10b66DecodeGoFormHubInternalModel2(in, v17)
					}
					out.Participants = append(out.Participants, v17)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6d10b66EncodeGoFormHubInternalModel7(out *jwriter.Writer, in FormResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"author\":"
		out.RawString(prefix)
		if in.Author == nil {
			out.RawString("null")
		} else {
			easyjson6d10b66EncodeGoFormHubInternalModel2(out, *in.Author)
		}
	}
	{
		const prefix string = ",\"passage_max\":"
		out.RawString(prefix)
		out.Int(int(in.PassageMax))
	}
	{
		const prefix string = ",\"number_of_passages\":"
		out.RawString(prefix)
		out.Int(int(in.NumberOfPassagesForm))
	}
	{
		const prefix string = ",\"questions\":"
		out.RawString(prefix)
		if in.Questions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v18, v19 := range in.Questions {
				if v18 > 0 {
					out.RawByte(',')
				}
				if v19 == nil {
					out.RawString("null")
				} else {
					easyjson6d10b66EncodeGoFormHubInternalModel8(out, *v19)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"anonymous\":"
		out.RawString(prefix)
		out.Bool(bool(in.Anonymous))
	}
	if len(in.Participants) != 0 {
		const prefix string = ",\"participants\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v20, v21 := range in.Participants {
				if v20 > 0 {
					out.RawByte(',')
				}
				if v21 == nil {
					out.RawString("null")
				} else {
					easyjson6d10b66EncodeGoFormHubInternalModel2(out, *v21)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FormResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6d10b66EncodeGoFormHubInternalModel7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FormResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6d10b66EncodeGoFormHubInternalModel7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FormResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6d10b66DecodeGoFormHubInternalModel7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FormResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6d10b66DecodeGoFormHubInternalModel7(l, v)
}
func easyjson6d10b66DecodeGoFormHubInternalModel8(in *jlexer.Lexer, out *QuestionResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "type":
			out.Type = int(in.Int())
		case "required":
			out.Required = bool(in.Bool())
		case "number_of_passages":
			out.NumberOfPassagesQuestion = int(in.Int())
		case "answers":
			if in.IsNull() {
				in.Skip()
				out.Answers = nil
			} else {
				in.Delim('[')
				if out.Answers == nil {
					if !in.IsDelim(']') {
						out.Answers = make([]*AnswerResult, 0, 8)
					} else {
						out.Answers = []*AnswerResult{}
					}
				} else {
					out.Answers = (out.Answers)[:0]
				}
				for !in.IsDelim(']') {
					var v22 *AnswerResult
					if in.IsNull() {
						in.Skip()
						v22 = nil
					} else {
						if v22 == nil {
							v22 = new(AnswerResult)
						}
						easyjson6d10b66DecodeGoFormHubInternalModel9(in, v22)
					}
					out.Answers = append(out.Answers, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6d10b66EncodeGoFormHubInternalModel8(out *jwriter.Writer, in QuestionResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"required\":"
		out.RawString(prefix)
		out.Bool(bool(in.Required))
	}
	{
		const prefix string = ",\"number_of_passages\":"
		out.RawString(prefix)
		out.Int(int(in.NumberOfPassagesQuestion))
	}
	{
		const prefix string = ",\"answers\":"
		out.RawString(prefix)
		if in.Answers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.Answers {
				if v23 > 0 {
					out.RawByte(',')
				}
				if v24 == nil {
					out.RawString("null")
				} else {
					easyjson6d10b66EncodeGoFormHubInternalModel9(out, *v24)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson6d10b66DecodeGoFormHubInternalModel9(in *jlexer.Lexer, out *AnswerResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "text":
			out.Text = string(in.String())
		case "selected_times":
			out.SelectedTimesAnswer = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6d10b66EncodeGoFormHubInternalModel9(out *jwriter.Writer, in AnswerResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix[1:])
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"selected_times\":"
		out.RawString(prefix)
		out.Int(int(in.SelectedTimesAnswer))
	}
	out.RawByte('}')
}
func easyjson6d10b66DecodeGoFormHubInternalModel10(in *jlexer.Lexer, out *FormPassageResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "form_id":
			out.FormID = int64(in.Int64())
		case "user_id":
			easyjson6d10b66DecodeDatabaseSql(in, &out.UserID)
		case "username":
			out.Username = string(in.String())
		case "first_name":
			out.FirstName = string(in.String())
		case "last_name":
			out.LastName = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "question_id":
			out.QuestionID = int64(in.Int64())
		case "answer_text":
			out.AnswerText = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6d10b66EncodeGoFormHubInternalModel10(out *jwriter.Writer, in FormPassageResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"form_id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.FormID))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		easyjson6d10b66EncodeDatabaseSql(out, in.UserID)
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"first_name\":"
		out.RawString(prefix)
		out.String(string(in.FirstName))
	}
	{
		const prefix string = ",\"last_name\":"
		out.RawString(prefix)
		out.String(string(in.LastName))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"question_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.QuestionID))
	}
	{
		const prefix string = ",\"answer_text\":"
		out.RawString(prefix)
		out.String(string(in.AnswerText))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FormPassageResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6d10b66EncodeGoFormHubInternalModel10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FormPassageResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6d10b66EncodeGoFormHubInternalModel10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FormPassageResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6d10b66DecodeGoFormHubInternalModel10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FormPassageResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6d10b66DecodeGoFormHubInternalModel10(l, v)
}
func easyjson6d10b66DecodeDatabaseSql(in *jlexer.Lexer, out *sql.NullInt64) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Int64":
			out.Int64 = int64(in.Int64())
		case "Valid":
			out.Valid = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6d10b66EncodeDatabaseSql(out *jwriter.Writer, in sql.NullInt64) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Int64\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Int64))
	}
	{
		const prefix string = ",\"Valid\":"
		out.RawString(prefix)
		out.Bool(bool(in.Valid))
	}
	out.RawByte('}')
}
func easyjson6d10b66DecodeGoFormHubInternalModel11(in *jlexer.Lexer, out *FormPassage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "form_id":
			if in.IsNull() {
				in.Skip()
				out.FormID = nil
			} else {
				if out.FormID == nil {
					out.FormID = new(int64)
				}
				*out.FormID = int64(in.Int64())
			}
		case "passage_answers":
			if in.IsNull() {
				in.Skip()
				out.PassageAnswers = nil
			} else {
				in.Delim('[')
				if out.PassageAnswers == nil {
					if !in.IsDelim(']') {
						out.PassageAnswers = make([]*PassageAnswer, 0, 8)
					} else {
						out.PassageAnswers = []*PassageAnswer{}
					}
				} else {
					out.PassageAnswers = (out.PassageAnswers)[:0]
				}
				for !in.IsDelim(']') {
					var v25 *PassageAnswer
					if in.IsNull() {
						in.Skip()
						v25 = nil
					} else {
						if v25 == nil {
							v25 = new(PassageAnswer)
						}
						(*v25).UnmarshalEasyJSON(in)
					}
					out.PassageAnswers = append(out.PassageAnswers, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6d10b66EncodeGoFormHubInternalModel11(out *jwriter.Writer, in FormPassage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"form_id\":"
		out.RawString(prefix[1:])
		if in.FormID == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.FormID))
		}
	}
	{
		const prefix string = ",\"passage_answers\":"
		out.RawString(prefix)
		if in.PassageAnswers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v26, v27 := range in.PassageAnswers {
				if v26 > 0 {
					out.RawByte(',')
				}
				if v27 == nil {
					out.RawString("null")
				} else {
					(*v27).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FormPassage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6d10b66EncodeGoFormHubInternalModel11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FormPassage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6d10b66EncodeGoFormHubInternalModel11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FormPassage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6d10b66DecodeGoFormHubInternalModel11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FormPassage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6d10b66DecodeGoFormHubInternalModel11(l, v)
}
func easyjson6d10b66DecodeGoFormHubInternalModel12(in *jlexer.Lexer, out *FormList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "forms":
			if in.IsNull() {
				in.Skip()
				out.Forms = nil
			} else {
				in.Delim('[')
				if out.Forms == nil {
					if !in.IsDelim(']') {
						out.Forms = make([]*Form, 0, 8)
					} else {
						out.Forms = []*Form{}
					}
				} else {
					out.Forms = (out.Forms)[:0]
				}
				for !in.IsDelim(']') {
					var v28 *Form
					if in.IsNull() {
						in.Skip()
						v28 = nil
					} else {
						if v28 == nil {
							v28 = new(Form)
						}
						(*v28).UnmarshalEasyJSON(in)
					}
					out.Forms = append(out.Forms, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "count":
			out.Count = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6d10b66EncodeGoFormHubInternalModel12(out *jwriter.Writer, in FormList) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"forms\":"
		out.RawString(prefix[1:])
		if in.Forms == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v29, v30 := range in.Forms {
				if v29 > 0 {
					out.RawByte(',')
				}
				if v30 == nil {
					out.RawString("null")
				} else {
					(*v30).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix)
		out.Int(int(in.Count))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FormList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6d10b66EncodeGoFormHubInternalModel12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FormList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6d10b66EncodeGoFormHubInternalModel12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FormList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6d10b66DecodeGoFormHubInternalModel12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FormList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6d10b66DecodeGoFormHubInternalModel12(l, v)
}
func easyjson6d10b66DecodeGoFormHubInternalModel13(in *jlexer.Lexer, out *Form) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if in.IsNull() {
				in.Skip()
				out.ID = nil
			} else {
				if out.ID == nil {
					out.ID = new(int64)
				}
				*out.ID = int64(in.Int64())
			}
		case "title":
			out.Title = string(in.String())
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "anonymous":
			out.Anonymous = bool(in.Bool())
		case "passage_max":
			out.PassageMax = int(in.Int())
		case "cur_passage_total":
			out.CurrentPassageTotal = int(in.Int())
		case "author":
			if in.IsNull() {
				in.Skip()
				out.Author = nil
			} else {
				if out.Author == nil {
					out.Author = new(UserGet)
				}
				easyjson6d10b66DecodeGoFormHubInternalModel2(in, out.Author)
			}
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "questions":
			if in.IsNull() {
				in.Skip()
				out.Questions = nil
			} else {
				in.Delim('[')
				if out.Questions == nil {
					if !in.IsDelim(']') {
						out.Questions = make([]*Question, 0, 8)
					} else {
						out.Questions = []*Question{}
					}
				} else {
					out.Questions = (out.Questions)[:0]
				}
				for !in.IsDelim(']') {
					var v31 *Question
					if in.IsNull() {
						in.Skip()
						v31 = nil
					} else {
						if v31 == nil {
							v31 = new(Question)
						}
						easyjson6d10b66DecodeGoFormHubInternalModel3(in, v31)
					}
					out.Questions = append(out.Questions, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6d10b66EncodeGoFormHubInternalModel13(out *jwriter.Writer, in Form) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		if in.ID == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.ID))
		}
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		if in.Description == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Description))
		}
	}
	{
		const prefix string = ",\"anonymous\":"
		out.RawString(prefix)
		out.Bool(bool(in.Anonymous))
	}
	{
		const prefix string = ",\"passage_max\":"
		out.RawString(prefix)
		out.Int(int(in.PassageMax))
	}
	{
		const prefix string = ",\"cur_passage_total\":"
		out.RawString(prefix)
		out.Int(int(in.CurrentPassageTotal))
	}
	{
		const prefix string = ",\"author\":"
		out.RawString(prefix)
		if in.Author == nil {
			out.RawString("null")
		} else {
			easyjson6d10b66EncodeGoFormHubInternalModel2(out, *in.Author)
		}
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"questions\":"
		out.RawString(prefix)
		if in.Questions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v32, v33 := range in.Questions {
				if v32 > 0 {
					out.RawByte(',')
				}
				if v33 == nil {
					out.RawString("null")
				} else {
					easyjson6d10b66EncodeGoFormHubInternalModel3(out, *v33)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Form) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6d10b66EncodeGoFormHubInternalModel13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Form) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6d10b66EncodeGoFormHubInternalModel13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Form) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6d10b66DecodeGoFormHubInternalModel13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Form) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6d10b66DecodeGoFormHubInternalModel13(l, v)
}
